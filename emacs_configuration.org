#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes



* Initial Setting

** Setup

This symbolic link is used to connect the local desktop configuration with the one under the /xsession/ folder.

#+begin_src sh :tangle no

  sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop

#+end_src

  Desktop entry for EXWM, runs the bash script

#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes
  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/vinid/.emacs.d/exwm/start-exwm.sh
  TryExec=sh
  Type=Application
#+end_src

Bash script that initialize EXWM

** Installing stuff

*** Straight.el

Straight is used to install packages

#+begin_src emacs-lisp
  
    (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  
#+end_src


** Back processes

#+begin_src  shell :tangle ./exwm/start-exwm.sh :shebang #!/bin/sh :mkdirp yes

  # Run the screen compositor
  compton &

  # Enable screen locking on suspend
  xss-lock -- slock &

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init  

#+end_src



#+BEGIN_SRC emacs-lisp

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (setq inhibit-startup-screen t)
  (setq visible-bell t)

#+END_SRC

Cleaning unused buffers

#+begin_src emacs-lisp

   (setq clean-buffer-list-delay-special (* 1 3600))
   (setq clean-buffer-list-delay-general 1)
   (global-set-key (kbd "C-c e b") 'clean-buffer-list)

#+end_src


** Desktop Setup

#+begin_src emacs-lisp
  
  (defvar vinid/default-font-size 140)
  (defvar vinid/default-variable-font-size 140)
  
  ;; Make frame transparency overridable
  (defvar vinid/frame-transparency '(90 . 90))
  
  (set-face-attribute 'default nil :font "Fira Code Retina" :height vinid/default-font-size)
  
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height vinid/default-font-size)
  
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height vinid/default-variable-font-size :weight 'regular)
  
  (use-package all-the-icons)
  
  (use-package spacegray-theme :defer t)
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))
  
  (ido-mode 1)
  
                                          ;  (use-package doom-modeline
                                          ;   :straight t
                                          ;  :init (doom-modeline-mode 1)
                                          ; :custom ((doom-modeline-height 15)))
  
  (global-display-line-numbers-mode t)
  
  (set-frame-parameter (selected-frame) 'alpha vinid/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,vinid/frame-transparency))
  
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  
  
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  
  
#+end_src


** Additional Packages

+ compton
+ slock
+ xss-lock
+ dunst for notifications 
+ fonts-firacode
+ fonts-cantarell
+ arandr

#+begin_src
sudo apt install emacs git fonts-firacode fonts-cantarell compton slock xss-lock arandr
#+end_src


* Other Emacs Packages

This part of the configuration includes basic stuff needed to have a working emacs environment

*** Ivy

#+begin_src emacs-lisp
  
     (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
  
    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode 1))
  
  (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
  
  
  (counsel-mode 1))
  
#+end_src



#+begin_src emacs-lisp 

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src


#+begin_src emacs-lisp

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


#+begin_src emacs-lisp

(defun vinid/org-mode-visual-fill ()
  (setq visual-fill-column-width 110
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . vinid/org-mode-visual-fill)) 

#+end_src

*** Dired

#+begin_src emacs-lisp

  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

;  (use-package dired-hide-dotfiles
 ;   :hook (dired-mode . dired-hide-dotfiles-mode)
  ;  :config
   ; (bind-key   "H" 'dired-hide-dotfiles-mode))

#+end_src

*** GPG setup

Not sure why, but without this GPG takes a long time to call the prompt for the passwords (seems to be a known bug).

Second option is for the gpg cache timeout

#+begin_src shell :tangle ~/.gnupg/gpg-agent.conf :makdirp yes
default-cache-ttl 86400      # cache for a day
max-cache-ttl 86400
no-allow-external-cache
#+end_src


*** Eshell

#+begin_src emacs-lisp

  (defun vinid/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . vinid/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))

  ;; making the eshell prompt starting with a lambda char
  (setq eshell-prompt-function
           (lambda ()
              (concat "[" (getenv "USER") "]"
               (eshell/pwd) (if (= (user-uid) 0) " # " " λ "))))


#+end_src

*** Org Mode

#+begin_src emacs-lisp
  
  (defun vinid/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  
      ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
  
      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  
    (defun vinid/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))
  
  (set-fringe-mode 0)  
#+end_src

Use package imports

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . vinid/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

  (setq org-agenda-start-with-log-mode t)

  (setq org-log-done 'time)

   (setq org-log-into-drawer t)

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package org-journal)

#+end_src

Setting the main variables
 
#+begin_src emacs-lisp
  
  (setq org-src-tab-acts-natively t)
  (setq org-journal-dir "~/Dropbox/org/journal/")
  (setq org-log-done t)
  (setq org-journal-file-type 'weekly)
  
  
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  
  
  (setq org-agenda-files '(
                           "~/Dropbox/org/gtd/gtd.org", "~/Dropbox/org/projects.org"))
  
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/gtd/inbox.org" "Refiling")
                                 "* TODO %i%?")))
  
  (setq org-refile-targets
        '(("~/Dropbox/org/gtd/gtd.org" :maxlevel . 3)
          ("~/Dropbox/org/gtd/archive.org" :maxlevel . 1)))
  
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
  
#+end_src

Custom view to personalize the org-mode experience

#+BEGIN_SRC emacs-lisp
  
   (setq org-todo-keywords
       '((sequence "TODO(t)" "NEXT(n)" "DONE(d)")))
  
  (setq org-agenda-span 'day)
  
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("WAIT" :foreground "yellow" :weight bold)
                ("NEXT" :foreground "orange" :weight bold)
                ("DONE" :foreground "forest green" :weight bold))))
  
   (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  
  (setq org-agenda-custom-commands
    '(("n" "Agenda / NEXT / TODO"
       ((agenda "" nil)
        (todo "NEXT" nil)
        (todo "TODO" nil))
       nil)))
  
#+END_SRC


** Org-Mode

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src


This snippet adds a hook to =org-mode= buffers so that =vinid/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun vinid/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs_configuration.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'vinid/org-babel-tangle-config)))
  
#+end_src


* EXWM

** Run or Raise

from git:tedroden




** Basic Setup
All the configuration params currently used in EXWM.


#+begin_src emacs-lisp
    (server-start)
  
  (setq mouse-autoselect-window t
        focus-follows-mouse t)
  
    (defun vinid/exwm-init-hook ()
      ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1))
  
  
    (defun vinid/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))
    ;; defines a function that makes a nicer visualization for the firefox tab
    (defun vinid/exwm-update-title ()
      (pcase exwm-class-name
        ("Firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))
  
    (defun vinid/set-wallpaper ()
      (interactive)
      ;; NOTE: You will need to update this to a valid background path!
      (start-process-shell-command
       "feh" nil  "feh --bg-scale /home/vinid/Pictures/Wallpapers/forest.jpg"))
  
    (use-package exwm
      :config
      ;; Set the default number of workspaces
      (setq exwm-workspace-number 5)
  
      ;; When window "class" updates, use it to set the buffer name
      (add-hook 'exwm-update-class-hook #'vinid/exwm-update-class)
  
      ;; When EXWM starts up, do some extra configuration
      (add-hook 'exwm-init-hook #'vinid/exwm-init-hook)
  
      (setq mouse-autoselect-window nil
            focus-follows-mouse nil)
  
      ;; When window title updates, use it to set the buffer name
  
      (add-hook 'exwm-update-title-hook #'vinid/exwm-update-title)
      ;; To add a key binding only available in line-mode, simply define it in
      ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
      (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)
  
      ;; adding a way to run apps
      (exwm-input-set-key (kbd "\C-c SPC") 'counsel-linux-app) 
  
  
      ;; (counsel-linux-app)
      ;; toggle fullscreen
      (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
  
      ;; Set the wallpaper after changing the resolution
      (vinid/set-wallpaper)
  
      ;; These keys should always pass through to Emacs
      (setq exwm-input-prefix-keys
            '(?\C-x
              ?\C-u
              ?\C-h
              ?\M-x
              ?\M-`
              ?\M-&
              ?\M-:
              ?\C-\M-j  ;; Buffer list
              ?\C-\ ))  ;; Ctrl+Space
  
      ;; Ctrl+Q will enable the next key to be sent directly
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  
      ;; The following example demonstrates how to use simulation keys to mimic
      ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
      ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
      ;; and DEST is what EXWM actually sends to application.  Note that both SRC
      ;; and DEST should be key sequences (vector or string).
      (setq exwm-input-simulation-keys
            '(
              ;; movement
              ([?\C-b] . [left])
              ([?\M-b] . [C-left])
              ([?\C-f] . [right])
              ([?\M-f] . [C-right])
              ([?\C-p] . [up])
              ([?\C-n] . [down])
              ([?\C-a] . [home])
              ([?\C-e] . [end])
              ([?\M-v] . [prior])
              ([?\C-v] . [next])
              ([?\C-d] . [delete])
              ([?\M-d] . [C-S-right delete])
              ([?\C-k] . [S-end delete])
              ;; cut paste
              ([?\C-w] . [?\C-x])
              ([?\M-w] . [?\C-c])
              ([?\C-y] . [?\C-v])
              ;; search
              ([?\C-s] . [?\C-f])))
  
  
  ;; raise the specified app if it's already started, otherwise start it
  ;; this should ideally raise buffer the previous buffer, not the current one
  ;; meaning: if I had chrome on the right side and I call this from the left side
  ;;          it should show up on the right side
  
  (defun vinid/run-or-raise (buffer-prefix &optional cmd)
        (let ((existing-buffer
                   (cl-dolist (buffer (buffer-list))
                         (if (string-prefix-p buffer-prefix (buffer-name buffer))
                                 (cl-return buffer)))))
          (if existing-buffer
                  ;; it's currently displayed, go to it
                  (if (get-buffer-window existing-buffer)
                                (message (format "%s" (pop-to-buffer existing-buffer)))
                        (exwm-workspace-switch-to-buffer existing-buffer))
                (start-process-shell-command buffer-prefix nil cmd))))
  
  
    (defun goto-wm-logseq ()
        "raise 'logseq'"		
        (interactive)
        (vinid/run-or-raise "Logseq" "flatpak run com.logseq.Logseq"))
  
  
      ;; Set up global key bindings.  These always work, no matter the input state!
      ;; Keep in mind that changing this list after EXWM initializes has no effect.
      (setq exwm-input-global-keys
            `(
              ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
              ([?\s-r] . exwm-reset)
  
              ;; Move between windows
              ([s-left] . windmove-left)
              ([s-right] . windmove-right)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)
  
              ;; Launch applications via shell command
              ([?\s-&] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))
  
              ;; Switch workspace
              ([?\s-w] . exwm-workspace-switch)
              ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
  
              ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))
  
  
  
      (exwm-enable))
  
#+end_src

** Configuration for the multiple screens

#+begin_src emacs-lisp
      
    (require 'exwm-randr)
    
    (exwm-randr-enable)
    
    (setq exwm-randr-workspace-monitor-plist '(2 "HDMI-1-2"))
    
    (setq exwm-workspace-warp-cursor t)
    
    
                                            ;  (defun vinid/update-displays ()
                                            ;    (vinid/run-in-background "autorandr --change --force")
                                            ;    (message "Display config: %s"
                                            ;             (string-trim (shell-command-to-string "autorandr --current"))))
    
                                            ;  (add-hook 'exwm-randr-screen-change-hook #'vinid/update-displays)
                                            ;  (vinid/update-displays)
    
    
    
#+end_src

* Apps

** Run in background function


This function allows to run a process in the background

#+begin_src emacs-lisp

  (defun vinid/run-in-background (command)
     (let ((command-parts (split-string command "[ ]+")))
       (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

#+end_src

** Dropbox

#+begin_src emacs-lisp

(vinid/run-in-background "dropbox start")

#+end_src




** Polybar

Polybar serves as the main bar on the top of the screen


#+begin_src shell :tangle /home/vinid/.config/polybar/config :mkdirp yes
  
  ; Docs: https://github.com/polybar/polybar
  ;==========================================================
  [settings]
  screenchange-reload = true
  
  [global/wm]
  margin-top = 0
  margin-bottom = 0
  
  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea
  
  [bar/panel]
  width = 100%
  height = 35
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true
  
  background = ${colors.background}
  foreground = ${colors.foreground}
  
  line-size = 2
  line-color = #f00
  
  border-size = 0
  border-color = #00000000
  
  padding-top = 5
  padding-left = 1
  padding-right = 1
  
  module-margin = 1
  
  font-0 = "Cantarell:size=14:weight=bold;2"
  font-1 = "Font Awesome:size=12;2"
  font-2 = "Material Icons:size=18;5"
  font-3 = "Fira Mono:size=11;-3"
  
  modules-left = exwm-workspace logo
  modules-right = cpu memory temperature battery date
  
  tray-position = right
  tray-padding = 2
  tray-maxsize = 28
  
  cursor-click = pointer
  cursor-scroll = ns-resize
  
  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-padding = 1
  
  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  
  [module/logo]
  type = custom/text
  content = T
  
  [module/date]
  type = internal/date
  interval = 5
  
  date = "%a %b %e"
  date-alt = "%A %B %d %Y"
  
  time = %l:%M %p
  time-alt = %H:%M:%S
  
  format-prefix-foreground = ${colors.foreground-alt}
  
  
  label = %date% %time%
  
  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M
  
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  
  
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-full = <ramp-capacity> <label-full>
  
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750
  
  [module/memory]
  type = internal/memory
  interval = 5
  format-prefix = " "
  label = %gb_used%
  
  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60
  
  format = <label>
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}
  
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
  
#+end_src

Very simple polybar to have on top of the EXWM desktop environment

#+begin_src emacs-lisp
    
    (defvar vinid/polybar-process nil
      "Holds the process of the running Polybar instance, if any")
    
    (defun vinid/kill-panel ()
      (interactive)
      (when vinid/polybar-process
        (ignore-errors
          (kill-process vinid/polybar-process)))
      (setq vinid/polybar-process nil))
    
    (defun vinid/start-panel ()
      (interactive)
      (vinid/kill-panel)
      (setq vinid/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))
    
    (defun vinid/send-polybar-hook (module-name hook-index)
      (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))
    
    (defun vinid/send-polybar-exwm-workspace ()
      (vinid/send-polybar-hook "exwm-workspace" 1))
    
    ;; Update panel indicator when workspace changes
    (add-hook 'exwm-workspace-switch-hook #'vinid/send-polybar-exwm-workspace)
    (vinid/start-panel)
    
    (setq exwm-workspace-number 4)
    
    (setq exwm-manage-force-tiling nil)
    
    ;; Automatically move EXWM buffer to current workspace when selected
  (setq exwm-layout-show-all-buffers t)
  
  ;; Display all EXWM buffers in every workspace buffer list
  (setq exwm-workspace-show-all-buffers t)
    
#+end_src

** Magit

#+begin_src emacs-lisp
  
(use-package magit)
  
#+end_src
** Quick access to some of the files




#+begin_src emacs-lisp


    (defun vinid/emacs-configuration ()
      (interactive)
      (find-file "~/.emacs.d/emacs_configuration.org"))

    (defun vinid/gtd-file ()
      (interactive)
      (find-file "~/Dropbox/org/gtd/gtd.org"))

  (defun vinid/inbox-file ()
      (interactive)
      (find-file "~/Dropbox/org/gtd/inbox.org"))

    (global-set-key (kbd "C-c e c") 'vinid/emacs-configuration)
    (global-set-key (kbd "C-c e g") 'vinid/gtd-file)
    (global-set-key (kbd "C-c e r") 'vinid/inbox-file)

#+end_src



#+begin_src emacs-lisp
  
  (global-set-key (kbd "C-ò") 'delete-backward-char)
  (global-set-key (kbd "C-c e l") 'goto-wm-logseq)

#+end_src


** 1passel

1passel is a very simple utility I have built to manage 1password integration withing EXWM

#+begin_src emacs-lisp
    
    (use-package 1passel
      :straight '(1passel :host github
                                     :repo "vinid/1passel"
                                     :branch "master"))
    
#+end_src


* Reference

This configuration is built around the one provided by David Wilson in his stream [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch]]

The org-mode configuration comes from different places but most of it comes from [[https://whhone.com/posts/org-mode-task-management/][Wai Hon's Blog]] and from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Nicolas Petton's Blog]].

The code for the run-or-raise function has been taken from [[https://github.com/tedroden/dot-files/tree/636ee636b472078b6a22b2076eb21b5421f58c9b][Here]].

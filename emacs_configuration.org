#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Basic Set Up

** Standard Configuration

#+BEGIN_SRC emacs-lisp

 (tool-bar-mode -1)
 (scroll-bar-mode -1)
 (menu-bar-mode -1)
 (setq inhibit-startup-screen t)
 (setq visible-bell t)


#+END_SRC

** Packaging

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** UI Configuration

*** Fonts

#+begin_src emacs-lisp

(defvar vinid/default-font-size 120)
(defvar vinid/default-variable-font-size 120)

;; Make frame transparency overridable
(defvar vinid/frame-transparency '(90 . 90))

(set-face-attribute 'default nil :font "Fira Code Retina" :height vinid/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height vinid/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height vinid/default-variable-font-size :weight 'regular)
#+end_src

*** Theme

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-themes
  :init (load-theme 'doom-palenight t))

(ido-mode 1)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(global-display-line-numbers-mode t)

(set-frame-parameter (selected-frame) 'alpha vinid/frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,vinid/frame-transparency))

(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))


;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))


#+end_src

** Useful base packages
*** Ivy

 #+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src 

*** Rainbow Which Key and Counsel

#+begin_src emacs-lisp 

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(global-set-key (kbd "C-M-j") 'counsel-switch-buffer)


#+end_src

** Keep Folders Clean

#+begin_src emacs-lisp

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


* Eshell

#+begin_src emacs-lisp
   (setq eshell-prompt-function
          (lambda ()
             (concat "[" (getenv "USER") 
              (eshell/pwd) (if (= (user-uid) 0) " # " " λ "))))
#+end_src


* Prgramming
** Haskell

#+BEGIN_SRC emacs-lisp

(use-package haskell-mode)

#+END_SRC


* EXWM

All the configuration params currently used in EXWM.

#+begin_src emacs-lisp

  ;; Load EXWM.
  (require 'exwm)

  ;; Fix problems with Ido (if you use it).
  (require 'exwm-config)
  (exwm-config-ido)

  ;; starting the server
  (server-start)

  ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
  ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
  ;; are run when a new X window class name or title is available.  Here's
  ;; some advice on this topic:
  ;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
  ;; + For applications with multiple windows (e.g. GIMP), the class names of
  ;    all windows are probably the same.  Using window titles for them makes
  ;;   more sense.
  ;; In the following example, we use class names for all windows except for
  ;; Java applications and GIMP.
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))

  ;; Global keybindings can be defined with `exwm-input-global-keys'.
  ;; Here are a few examples:
  (setq exwm-input-global-keys
        `(
          ;; Bind "s-r" to exit char-mode and fullscreen mode.
          ([?\s-r] . exwm-reset)
          ;; Bind "s-w" to switch workspace interactively.
          ([?\s-w] . exwm-workspace-switch)
          ;; Bind "s-0" to "s-9" to switch to a workspace by its index.
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))
          ;; Bind "s-&" to launch applications ('M-&' also works if the output
          ;; buffer does not bother you).
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "λ ")))
                       (start-process-shell-command command nil command)))
          ;; Bind "s-<f2>" to "slock", a simple X display locker.
          ([s-f2] . (lambda ()
                      (interactive)
                      (start-process "" nil "/usr/bin/slock")))))

  ;; To add a key binding only available in line-mode, simply define it in
  ;; `exwm-mode-map'.  The following example shortens 'C-c q' to 'C-q'.
  (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

  ;; The following example demonstrates how to use simulation keys to mimic
  ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
  ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
  ;; and DEST is what EXWM actually sends to application.  Note that both SRC
  ;; and DEST should be key sequences (vector or string).
  (setq exwm-input-simulation-keys
        '(
          ;; movement
          ([?\C-b] . [left])
          ([?\M-b] . [C-left])
          ([?\C-f] . [right])
          ([?\M-f] . [C-right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])
          ;; cut/paste.
          ([?\C-w] . [?\C-x])
          ([?\M-w] . [?\C-c])
          ([?\C-y] . [?\C-v])
          ;; search
          ([?\C-s] . [?\C-f])))

  ;; You can hide the minibuffer and echo area when they're not used, by
  ;; uncommenting the following line.
  ;(setq exwm-workspace-minibuffer-position 'bottom)

  ;; Do not forget to enable EXWM. It will start by itself when things are
  ;; ready.  You can put it _anywhere_ in your configuration.
  (exwm-enable)


#+end_src


* Polybar

#+begin_src shell :tangle /home/vinid/.config/polybar/config :mkdirp yes
 
; Docs: https://github.com/polybar/polybar
;==========================================================
[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/panel]
width = 100%
height = 35
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=14:weight=bold;2"
font-1 = "Font Awesome:size=12;2"
font-2 = "Material Icons:size=18;5"
font-3 = "Fira Mono:size=11;-3"

modules-left = exwm-workspace logo
modules-right = cpu memory temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/logo]
type = custom/text
content = λ

[module/date]
type = internal/date
interval = 5

date = "%a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>


label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-full = <ramp-capacity> <label-full>

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/memory]
type = internal/memory
interval = 5
format-prefix = " "
label = %gb_used%

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}

#+end_src

Very simple polybar to have on top of the EXWM desktop environment

#+begin_src emacs-lisp

  (defvar vinid/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun vinid/kill-panel ()
    (interactive)
    (when vinid/polybar-process
      (ignore-errors
        (kill-process vinid/polybar-process)))
    (setq vinid/polybar-process nil))

  (defun vinid/start-panel ()
    (interactive)
    (vinid/kill-panel)
    (setq vinid/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun vinid/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun vinid/send-polybar-exwm-workspace ()
    (vinid/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'vinid/send-polybar-exwm-workspace)
  (vinid/start-panel)

  (setq exwm-workspace-number 4)


#+end_src 


* Org Mode

** Fonts

#+begin_src emacs-lisp

  (defun vinid/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (defun vinid/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))


#+end_src


** Org Setup

*** Importing Packages and General Configuration

Use package imports

#+begin_src emacs-lisp

    (use-package org
        :hook (org-mode . vinid/org-mode-setup)
        :config
        (setq org-ellipsis " ▾"))

    (setq org-agenda-start-with-log-mode t)

    (setq org-log-done 'time)

    (setq org-log-into-drawer t)

    (use-package org-bullets
        :after org
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


  (use-package org-journal)

#+end_src

Setting the main variables
 
#+begin_src emacs-lisp

  (setq org-src-tab-acts-natively t)
  (setq org-journal-dir "~/Dropbox/org/journal/")
  (setq org-log-done t)



    (define-key global-map "\C-ca" 'org-agenda)
    (define-key global-map "\C-cl" 'org-store-link)
    (global-set-key (kbd "C-c c") 'org-capture)


    (setq org-agenda-files '(
                             "~/Dropbox/org/gtd/study.org"
                             "~/Dropbox/org/gtd/gtd.org"
                             "~/Dropbox/org/gtd/habits.org"
                             "~/org/research.org"))

    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/Dropbox/org/gtd/inbox.org" "Refiling")
                                   "* TODO %i%?")))

    (setq org-refile-targets
      '(("~/Dropbox/org/gtd/gtd.org" :maxlevel . 3)
        ("~/Dropbox/org/gtd/archive.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)


#+end_src

*** Custom View

Custom view to personalize the org-mode experience

#+BEGIN_SRC emacs-lisp

   (setq org-todo-keywords
       '((sequence "TODO(t)" "NEXT(n)" "PROG(p)" "INTR(i)" "DONE(d)")))

  (setq org-agenda-span 'day)


  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("PROG" :foreground "yellow" :weight bold)
                ("WAIT" :foreground "blue" :weight bold)
                ("NEXT" :foreground "orange" :weight bold)
                ("INTR" :foreground "pink" :weight bold)
                ("DONE" :foreground "forest green" :weight bold))))

   (setq org-treat-S-cursor-todo-selection-as-state-change nil)

   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (setq org-agenda-custom-commands
    '(("n" "Agenda / INTR / PROG / NEXT"
       ((agenda "" nil)
        (todo "INTR" nil)
        (todo "PROG" nil)
        (todo "NEXT" nil))
       nil)))

#+END_SRC


** Org Habits


#+begin_src emacs-lisp

 (require 'org-habit)
 (add-to-list 'org-modules 'org-habit)

#+end_src 




* Org Babel   

** Configure Babel Snippet

#+begin_src emacs-lisp

(use-package org
   :config
  (add-to-list 'org-modules 'org-tempo))

#+end_src 


#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =vinid/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun vinid/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs_configuration.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'vinid/org-babel-tangle-config)))



#+end_src


* Org Roam

#+BEGIN_SRC emacs-lisp

           (use-package org-roam
                 :ensure t
                 :hook
                 (after-init . org-roam-mode)
                 :custom
                 (org-roam-directory "/home/vinid/Dropbox/org/roam")
                 :bind (:map org-roam-mode-map
                         (("C-c n l" . org-roam)
                          ("C-c n f" . org-roam-find-file)
                          ("C-c n g" . org-roam-graph))
                         :map org-mode-map
                         (("C-c n i" . org-roam-insert))
                         (("C-c n I" . org-roam-insert-immediate))))

        (add-to-list 'exec-path "/usr/bin/") ; probably not necessary

        (add-hook 'after-init-hook 'org-roam-mode)


   (use-package org-ref)

   (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

  (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
          org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
          org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")



#+END_SRC


* Custom Commands

** Google Search

setting up a command to run a simple google search with a key binding

#+begin_src emacs-lisp

(defun search-google ()
"A function that google a selected region, if any, alternatively asks for something to serach"
  (interactive)
  (let ((searchkey  (url-hexify-string (if mark-active
         (buffer-substring (region-beginning) (region-end))
       (read-string "Serach String: ")))))
  (browse-url (concat "https://www.google.com/search?&q=" searchkey))))


       
  #+end_src

** Grammarly

Setting up a command that opens grammarly on the web and at the same time copies the current region. The content has to be manually pasted.

#+begin_src emacs-lisp

(defun open-grammarly-with-kill ()
"A function to open a new grammarly document"
  (interactive)
  (progn  
       (if mark-active (copy-region-as-kill (region-beginning) (region-end)) nil)
       (browse-url "https://app.grammarly.com/docs/new")))

  #+end_src

buffer-substring


* Keybindings

#+begin_src emacs-lisp
  
(global-set-key (kbd "C-ò") 'delete-backward-char)
(global-set-key (kbd "C-c g") #'search-google)
(global-set-key (kbd "C-c r") #'open-grammarly-with-kill)

#+end_src


* Reference

This configuration is built around the one provided by David Wilson in his stream [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs From Scratch]]

The org-mode configuration comes from different places but most of it comes from [[https://whhone.com/posts/org-mode-task-management/][Wai Hon's Blog]] and from [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Nicolas Petton's Blog]].
